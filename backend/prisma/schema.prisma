
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Table {
  id                 String  @id @default(cuid())
  number             Int     @unique
  capacity           Int
  name               String?
  status             TableStatus @default(AVAILABLE) // AVAILABLE, OCCUPIED, RESERVED, DIRTY
  currentOrderId     String? // ID of the current order on this table
  currentOrderTotal  Float?  // Total amount of the current order
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  DIRTY
}

model MenuCategory {
  id        String     @id @default(cuid())
  name      String     @unique
  iconName  String?
  items     MenuItem[] // Relation to MenuItem
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Modifier {
  id          String     @id @default(cuid())
  name        String     @unique
  priceChange Float
  menuItems   MenuItem[] @relation("MenuItemAvailableModifiers")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model MenuItem {
  id                 String     @id @default(cuid())
  name               String
  description        String?
  price              Float
  imageUrl           String?
  dataAiHint         String?    // For Unsplash search hint for placeholder images
  
  categoryId         String
  category           MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  availableModifiers Modifier[] @relation("MenuItemAvailableModifiers")

  orderItems         OrderItem[] // Relation to OrderItem

  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  @@index([categoryId])
}

model Order {
  id          String      @id @default(cuid())
  tableId     String
  tableNumber Int         // Denormalized for convenience
  items       OrderItem[]
  status      OrderStatus @default(OPEN) // OPEN, IN_PROGRESS, DONE, PAID, CANCELLED
  subtotal    Float
  taxRate     Float       // e.g., 0.08 for 8%
  taxAmount   Float
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum OrderStatus {
  OPEN
  IN_PROGRESS
  DONE
  PAID
  CANCELLED
}

model OrderItem {
  id                String    @id @default(cuid())
  orderId           String
  order             Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  menuItemId        String
  menuItem          MenuItem  @relation(fields: [menuItemId], references: [id], onDelete:Restrict) // Prevent deleting menu item if it's in an order
  menuItemName      String    // Denormalized
  quantity          Int
  unitPrice         Float     // Price of the menu item at the time of order
  
  selectedModifiers Json?     // Store selected modifiers as JSON: [{id: "mod1", name: "Extra Cheese", priceChange: 1.50}, ...]
                               // This captures modifier details at the time of order.
  
  specialRequests   String?
  totalPrice        Float     // Calculated: quantity * (unitPrice + sum of selectedModifier.priceChange)

  @@index([orderId])
  @@index([menuItemId])
}
