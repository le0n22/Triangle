generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Table {
  id        String  @id @default(cuid())
  number    Int     @unique
  capacity  Int
  name      String?
  status    TableStatus @default(AVAILABLE) // AVAILABLE, OCCUPIED, RESERVED, DIRTY
  orders    Order[]

  currentOrderId    String?    // Store the ID of the current open or in_progress order
  currentOrderTotal Decimal?   @db.Decimal(10, 2) // Store the total of the current order for quick display

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MenuCategory {
  id                 String       @id @default(cuid())
  name               String       @unique
  iconName           String? // For Lucide icon name or custom SVG identifier
  menuItems          MenuItem[]
  defaultPrinterRole PrinterRole? // Optional: KITCHEN_KOT, BAR_KOT etc.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MenuItem {
  id                 String       @id @default(cuid())
  name               String       @unique
  description        String?
  price              Decimal      @db.Decimal(10, 2)
  imageUrl           String?
  dataAiHint         String?      // For Unsplash/placeholder hints
  category           MenuCategory @relation(fields: [categoryId], references: [id])
  categoryId         String
  orderItems         OrderItem[]
  availableModifiers Modifier[]   @relation("MenuItemModifiers")
  defaultPrinterRole PrinterRole? // Optional: Overrides category default, can be KITCHEN_KOT, BAR_KOT etc.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Modifier {
  id            String     @id @default(cuid())
  name          String     @unique
  priceChange   Decimal    @db.Decimal(10, 2) // Positive for add-ons, negative for discounts/removals
  menuItems     MenuItem[] @relation("MenuItemModifiers")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String        @id @default(cuid())
  table       Table         @relation(fields: [tableId], references: [id])
  tableId     String
  items       OrderItem[]
  status      OrderStatus   @default(OPEN) // OPEN, IN_PROGRESS, DONE, PAID, CANCELLED
  subtotal    Decimal       @db.Decimal(10, 2)
  taxRate     Decimal       @db.Decimal(4, 3) // e.g., 0.08 for 8%
  taxAmount   Decimal       @db.Decimal(10, 2)
  totalAmount Decimal       @db.Decimal(10, 2)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model OrderItem {
  id                String    @id @default(cuid())
  order             Order     @relation(fields: [orderId], references: [id])
  orderId           String
  menuItemId        String    // References MenuItem.id, but no direct relation to avoid cascade delete issues on MenuItem
  menuItemName      String    // Denormalized for historical data integrity
  quantity          Int
  unitPrice         Decimal   @db.Decimal(10, 2) // Price at the time of order
  selectedModifiers Json      // Store as JSON: [{ id, name, priceChange }]
  specialRequests   String?
  totalPrice        Decimal   @db.Decimal(10, 2) // quantity * (unitPrice + sum of modifier priceChanges)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  DIRTY
}

enum OrderStatus {
  OPEN
  IN_PROGRESS
  DONE // Order is prepared, ready for payment
  PAID
  CANCELLED
}

// Added for defaultPrinterRole in MenuCategory and MenuItem
enum PrinterRole {
  KITCHEN_KOT
  BAR_KOT
  RECEIPT // For customer receipts
  REPORT // For end-of-day reports etc.
}
