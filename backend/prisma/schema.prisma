
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Table {
  id        String  @id @default(cuid())
  name      String?
  number    Int     @unique
  capacity  Int
  status    TableStatus @default(AVAILABLE) // AVAILABLE, OCCUPIED, RESERVED, DIRTY
  
  // For tracking current order details directly on the table
  currentOrderId    String?   @unique
  currentOrderTotal Decimal?  @db.Decimal(10, 2)

  orders    Order[] // Relation to Order model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  DIRTY
}

model MenuCategory {
  id                 String @id @default(cuid())
  name               String @unique
  iconName           String? // For Lucide icon name or custom SVG identifier
  defaultPrinterRole PrinterRole? // Default role for items in this category

  menuItems MenuItem[] // Relation to MenuItem model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MenuItem {
  id                 String     @id @default(cuid())
  name               String     @unique
  description        String?
  price              Decimal    @db.Decimal(10, 2)
  imageUrl           String?
  dataAiHint         String?    // For Unsplash search hint
  defaultPrinterRole PrinterRole? // Item-specific printer role override

  categoryId String
  category   MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // Many-to-many relationship with Modifier
  availableModifiers Modifier[] @relation("MenuItemModifiers")

  // Relation to OrderItem model (menu items can be part of many order items)
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Modifier {
  id          String   @id @default(cuid())
  name        String   @unique
  priceChange Decimal  @db.Decimal(10, 2) // Can be positive or negative

  // Many-to-many relationship with MenuItem
  menuItems MenuItem[] @relation("MenuItemModifiers")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        String   @id @default(cuid())
  tableId   String
  table     Table    @relation(fields: [tableId], references: [id])
  
  items     OrderItem[] // Relation to OrderItem model
  
  status    OrderStatus @default(OPEN) // e.g., OPEN, IN_PROGRESS, DONE, PAID, CANCELLED
  
  subtotal  Decimal  @db.Decimal(10, 2)
  taxRate   Decimal  @db.Decimal(5, 4) // e.g., 0.08 for 8%
  taxAmount Decimal  @db.Decimal(10, 2)
  totalAmount Decimal @db.Decimal(10, 2)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Restrict) // Prevent deletion of MenuItem if it's in an order
  menuItemName String // Denormalized for easy KOT/receipt generation
  
  quantity  Int
  unitPrice Decimal  @db.Decimal(10, 2) // Price of the item at the time of order
  
  // Store selected modifiers as JSON
  // Example: [{"id": "mod1", "name": "Extra Cheese", "priceChange": 1.50}, ...]
  selectedModifiers Json? 
  
  specialRequests String?
  
  totalPrice Decimal @db.Decimal(10, 2) // quantity * (unitPrice + sum of modifier priceChanges)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  OPEN
  IN_PROGRESS
  DONE
  PAID
  CANCELLED
}

// Roles a printer can fulfill (e.g., for KOTs, receipts)
// This enum is used by MenuCategory and MenuItem to suggest a default printer.
// The actual mapping of these roles to physical printers is handled by the Electron print server.
enum PrinterRole {
  KITCHEN_KOT
  BAR_KOT
  RECEIPT
  REPORT
}

// Removed PrinterConfiguration model
// enum PrinterConnectionType {
//   NETWORK
//   BLUETOOTH
//   USB
//   OTHER
// }
// model PrinterConfiguration {
//   id             String                @id @default(cuid())
//   name           String                @unique
//   connectionType PrinterConnectionType
//   connectionInfo String // e.g., IP address, COM port, Bluetooth MAC
//   roles          PrinterRole[] // List of roles this printer fulfills
//   createdAt      DateTime              @default(now())
//   updatedAt      DateTime              @updatedAt
// }
