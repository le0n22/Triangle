
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Table {
  id                 String   @id @default(cuid())
  name               String?
  number             Int      @unique
  capacity           Int
  status             TableStatus @default(AVAILABLE)
  orders             Order[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  currentOrderId     String?  // To store the ID of the current open order, if any
  currentOrderTotal  Decimal? // To store the total of the current open order
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  DIRTY
}

model MenuCategory {
  id                 String      @id @default(cuid())
  name               String      @unique
  iconName           String?
  menuItems          MenuItem[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  defaultPrinterRole PrinterRole? // Added default printer role
}

model MenuItem {
  id                   String          @id @default(cuid())
  name                 String          @unique
  description          String?
  price                Decimal
  imageUrl             String?
  dataAiHint           String?         @map("data_ai_hint")
  category             MenuCategory    @relation(fields: [categoryId], references: [id])
  categoryId           String
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  availableModifiers   Modifier[]      @relation("MenuItemModifiers")
  orderItems           OrderItem[]     // Relation to OrderItem (added/ensured)
}

model Modifier {
  id                 String     @id @default(cuid())
  name               String     @unique
  priceChange        Decimal    @map("price_change") // How much this modifier changes the item's price
  menuItems          MenuItem[] @relation("MenuItemModifiers")
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

model Order {
  id          String      @id @default(cuid())
  table       Table       @relation(fields: [tableId], references: [id])
  tableId     String
  items       OrderItem[]
  status      OrderStatus @default(OPEN)
  subtotal    Decimal
  taxRate     Decimal     @map("tax_rate")
  taxAmount   Decimal     @map("tax_amount")
  totalAmount Decimal     @map("total_amount")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id                String   @id @default(cuid())
  order             Order    @relation(fields: [orderId], references: [id])
  orderId           String
  menuItem          MenuItem @relation(fields: [menuItemId], references: [id]) // Added relation field to MenuItem
  menuItemId        String   // Foreign key to MenuItem
  menuItemName      String   // Denormalized for easier display in KOT/receipts
  quantity          Int
  unitPrice         Decimal
  selectedModifiers Json?    // JSON array of selected modifier objects { id, name, priceChange }
  specialRequests   String?
  totalPrice        Decimal  // Calculated: (unitPrice + sum_of_modifier_price_changes) * quantity
}

enum OrderStatus {
  OPEN
  IN_PROGRESS
  DONE // Order prepared, ready for payment or serving completely
  PAID
  CANCELLED
}

// Printer Configuration Model
model PrinterConfiguration {
  id             String                 @id @default(cuid())
  name           String                 @unique
  connectionType PrinterConnectionType
  connectionInfo String
  roles          PrinterRole[]
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
}

enum PrinterConnectionType {
  NETWORK
  BLUETOOTH
  USB
  OTHER
}

enum PrinterRole {
  KITCHEN_KOT
  BAR_KOT
  RECEIPT
  REPORT
}
