
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MenuCategory {
  id                 String     @id @default(cuid())
  name               String     @unique
  iconName           String?
  items              MenuItem[]
  defaultPrinterRole PrinterRole? // Added field for default printer role

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MenuItem {
  id                 String      @id @default(cuid())
  name               String      @unique
  description        String?
  price              Decimal     @db.Decimal(10, 2)
  imageUrl           String?
  dataAiHint         String?
  category           MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId         String
  availableModifiers Modifier[]  @relation("MenuItemModifiers")
  orderItems         OrderItem[] // Relation to OrderItem

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Modifier {
  id           String     @id @default(cuid())
  name         String     @unique
  priceChange  Decimal    @db.Decimal(10, 2) // e.g., +1.50 for extra cheese, -0.50 for no onions
  menuItems    MenuItem[] @relation("MenuItemModifiers")
  // selectedInOrderItems OrderItem[] @relation("OrderItemModifiers") // This relation might be complex if storing selected modifiers directly

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Table {
  id                 String    @id @default(cuid())
  name               String?
  number             Int       @unique
  capacity           Int
  status             TableStatus @default(AVAILABLE)
  currentOrderId     String?   // Optional: Store the ID of the current active order
  currentOrderTotal  Decimal?  @db.Decimal(10, 2) // Optional: Store the total of the current active order
  orders             Order[]   // Relation to Order

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String      @id @default(cuid())
  table       Table       @relation(fields: [tableId], references: [id])
  tableId     String
  items       OrderItem[]
  status      OrderStatus @default(OPEN)
  subtotal    Decimal     @db.Decimal(10, 2)
  taxRate     Decimal     @db.Decimal(5, 4) // e.g., 0.0800 for 8%
  taxAmount   Decimal     @db.Decimal(10, 2)
  totalAmount Decimal     @db.Decimal(10, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tableId])
}

model OrderItem {
  id                String  @id @default(cuid())
  order             Order   @relation(fields: [orderId], references: [id])
  orderId           String
  menuItemId        String  // Store ID of the MenuItem
  menuItemName      String  // Denormalized for easy display
  quantity          Int
  unitPrice         Decimal @db.Decimal(10, 2) // Price of one unit at the time of order
  selectedModifiers Json?   // Store selected modifiers as JSON: [{ id: "mod1", name: "Extra Cheese", priceChange: 1.50 }, ...]
  specialRequests   String?
  totalPrice        Decimal @db.Decimal(10, 2) // quantity * (unitPrice + sum of modifier priceChanges)

  // Optional: If you want a direct relation to MenuItem (can be complex with pricing changes over time)
  // menuItem MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Restrict) // This might cause issues if menu items are deleted

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([menuItemId])
}

model PrinterConfiguration {
  id             String                 @id @default(cuid())
  name           String                 @unique
  connectionType PrinterConnectionType
  connectionInfo String                 // e.g., IP address, Bluetooth MAC, USB port identifier
  roles          PrinterRole[]          // List of roles this printer can fulfill
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  DIRTY
}

enum OrderStatus {
  OPEN
  IN_PROGRESS
  DONE
  PAID
  CANCELLED
}

// Enum for Printer Connection Types
enum PrinterConnectionType {
  NETWORK // TCP/IP based network printer
  BLUETOOTH
  USB
  OTHER // For any other connection types or future integrations
}

// Enum for Printer Roles
enum PrinterRole {
  KITCHEN_KOT // For kitchen order tickets
  BAR_KOT     // For bar order tickets (drinks, etc.)
  RECEIPT     // For customer receipts/bills
  REPORT      // For printing system reports
}
