// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Table {
  id                  String    @id @default(cuid())
  number              Int       @unique
  name                String?
  capacity            Int
  status              TableStatus @default(AVAILABLE)
  orders              Order[]
  currentOrderId      String?   // To quickly fetch the current active order
  currentOrderTotal   Decimal?  // To display on the table card
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  DIRTY
}

model MenuCategory {
  id        String     @id @default(cuid())
  name      String     @unique
  iconName  String?    // For Lucide icon name
  menuItems MenuItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model MenuItem {
  id                 String         @id @default(cuid())
  name               String         @unique
  description        String?
  price              Decimal        @db.Decimal(10, 2)
  imageUrl           String?
  dataAiHint         String?        // For AI image search suggestions
  category           MenuCategory   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId         String
  availableModifiers Modifier[]     @relation("MenuItemModifiers")
  orderItems         OrderItem[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model Modifier {
  id             String     @id @default(cuid())
  name           String     @unique
  priceChange    Decimal    @db.Decimal(10, 2) // Can be positive or negative
  menuItems      MenuItem[] @relation("MenuItemModifiers")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Order {
  id          String      @id @default(cuid())
  table       Table       @relation(fields: [tableId], references: [id])
  tableId     String
  items       OrderItem[]
  status      OrderStatus @default(OPEN)
  subtotal    Decimal     @db.Decimal(10, 2)
  taxRate     Decimal     @db.Decimal(5, 4) // e.g., 0.0800 for 8%
  taxAmount   Decimal     @db.Decimal(10, 2)
  totalAmount Decimal     @db.Decimal(10, 2)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id                String    @id @default(cuid())
  order             Order     @relation(fields: [orderId], references: [id])
  orderId           String
  menuItem          MenuItem  @relation(fields: [menuItemId], references: [id], onDelete: Restrict) // Prevent deleting menu item if in an order
  menuItemId        String
  menuItemName      String    // Denormalized for KOT and display
  quantity          Int
  unitPrice         Decimal   @db.Decimal(10, 2) // Price at the time of order
  selectedModifiers Json      // Store as JSON: [{ id: "modId", name: "Extra Cheese", priceChange: 1.50 }, ...]
  specialRequests   String?
  totalPrice        Decimal   @db.Decimal(10, 2) // quantity * (unitPrice + sum of modifier priceChanges)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

enum OrderStatus {
  OPEN       // Order created, items can be added/modified
  IN_PROGRESS // Kitchen has started preparing
  DONE       // Kitchen has finished, ready for payment/delivery
  PAID       // Payment completed
  CANCELLED  // Order cancelled
}

// New Printer Configuration Model
enum PrinterConnectionType {
  NETWORK
  BLUETOOTH
  USB
  OTHER
}

enum PrinterRole {
  KITCHEN_KOT
  BAR_KOT
  RECEIPT
  REPORT
}

model PrinterConfiguration {
  id             String                @id @default(cuid())
  name           String                @unique
  connectionType PrinterConnectionType
  connectionInfo String
  roles          PrinterRole[]
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
}
