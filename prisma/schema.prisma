datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum TableStatus {
  available
  occupied
  reserved
  dirty
}

enum OrderStatus {
  OPEN
  IN_PROGRESS
  DONE
  PAID
  CANCELLED
}

enum PaymentMethod {
  cash
  card
  mobile
}

enum ExternalOrderStatus {
  PENDING_CONFIRMATION
  PREPARING
  READY_FOR_PICKUP
  ON_THE_WAY
  DELIVERED
  CANCELLED_BY_RESTAURANT
  CANCELLED_BY_USER
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  passwordHash String // Store hashed password
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[]  @relation("UserOrders")
}

model Table {
  id                String      @id @default(cuid())
  name              String?
  number            Int         @unique
  status            TableStatus @default(available)
  capacity          Int
  currentOrderId    String?     // Can be used to quickly fetch the current order if needed
  currentOrderTotal Float?
  orders            Order[]     @relation("OrdersOnTable")
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  iconName  String?
  items     MenuItem[] @relation("CategoryMenuItems")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Modifier {
  id                         String                       @id @default(cuid())
  name                       String                       @unique
  priceChange                Float
  menuItemsAvailable         MenuItem[]                   @relation("MenuItemAvailableModifiers")
  orderItemModifierSelections OrderItemModifierSelection[] @relation("OrderItemSelectionToModifier")
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
}

model MenuItem {
  id                  String      @id @default(cuid())
  name                String
  description         String
  price               Float
  imageUrl            String?
  dataAiHint          String?
  category            Category    @relation("CategoryMenuItems", fields: [categoryId], references: [id])
  categoryId          String
  availableModifiers  Modifier[]  @relation("MenuItemAvailableModifiers")
  orderItems          OrderItem[] @relation("MenuItemOrderItems")
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model Order {
  id          String      @id @default(cuid())
  tableNumber Int // Denormalized for convenience, linked to Table model
  status      OrderStatus @default(OPEN)
  subtotal    Float
  taxRate     Float
  taxAmount   Float
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  table       Table       @relation("OrdersOnTable", fields: [tableId], references: [id])
  tableId     String
  user        User?       @relation("UserOrders", fields: [userId], references: [id])
  userId      String?
  items       OrderItem[] @relation("OrderOrderItems")
  kots        KOT[]       @relation("OrderKOTs")
}

model OrderItem {
  id                          String                       @id @default(cuid())
  menuItemName                String // Denormalized for display consistency
  quantity                    Int
  unitPrice                   Float // Price at the time of ordering item
  specialRequests             String?
  totalPrice                  Float // Calculated: quantity * (unitPrice + sum of selected modifier priceChanges)
  order                       Order                        @relation("OrderOrderItems", fields: [orderId], references: [id], onDelete: Cascade)
  orderId                     String
  menuItem                    MenuItem                     @relation("MenuItemOrderItems", fields: [menuItemId], references: [id])
  menuItemId                  String
  selectedModifierSelections OrderItemModifierSelection[] @relation("OrderItemToModifierSelections")
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
}

// Explicit join table for selected modifiers on an order item
model OrderItemModifierSelection {
  id         String   @id @default(cuid())
  orderItem  OrderItem @relation("OrderItemToModifierSelections", fields: [orderItemId], references: [id], onDelete: Cascade)
  orderItemId String
  modifier   Modifier @relation("OrderItemSelectionToModifier", fields: [modifierId], references: [id])
  modifierId String
  // priceAtSelection Float // Price of modifier at the time it was added to the order item
  createdAt  DateTime @default(now())

  @@unique([orderItemId, modifierId])
}

model KOT {
  id          String   @id @default(cuid())
  tableNumber Int
  itemsJson   Json // Stores KOT items [{ name, quantity, modifiers: [], specialRequests }]
  createdAt   DateTime @default(now())
  order       Order    @relation("OrderKOTs", fields: [orderId], references: [id])
  orderId     String
}

model ExternalOrder {
  id                    String                @id @default(cuid())
  platform              String
  platformOrderId       String                @unique // Usually unique per platform
  customerName          String
  customerAddress       String
  customerPhoneNumber   String?
  subtotal              Float
  deliveryFee           Float
  platformFee           Float?
  totalAmount           Float
  restaurantPayout      Float?
  status                ExternalOrderStatus
  placedAt              DateTime
  estimatedDeliveryTime DateTime?
  notes                 String?
  paymentServiceType    String?
  shortCode             String?
  platformIconName      String? // Name of the icon (e.g., 'TrendyolIcon')
  items                 ExternalOrderItem[]   @relation("ExternalOrderItems")
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}

model ExternalOrderItem {
  id              String        @id @default(cuid())
  name            String
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  notes           String?
  modifiersJson   Json? // Store selected modifiers as JSON: [{ name, price }]
  externalOrder   ExternalOrder @relation("ExternalOrderItems", fields: [externalOrderId], references: [id], onDelete: Cascade)
  externalOrderId String
  createdAt       DateTime      @default(now())
}

model DeliveryPlatform {
  id        String   @id @default(cuid())
  name      String   @unique
  apiKey    String
  apiSecret String   // Should be stored encrypted in a real app or use a secrets manager
  isEnabled Boolean  @default(true)
  createdAt