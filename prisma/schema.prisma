
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Ensure this is set in your .env file or environment variables
}

// User model for authentication (Example)
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String // Store hashed passwords, not plain text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[] // A user can have multiple orders (if linking users to orders)
}

model Table {
  id                String    @id @default(cuid())
  name              String?
  number            Int       @unique // Table number should be unique
  status            TableStatus @default(AVAILABLE)
  capacity          Int
  currentOrderId    String?   // ID of the current order occupying the table
  currentOrderTotal Float?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  currentOrder      Order?    @relation("CurrentTableOrder", fields: [currentOrderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orders            Order[]   @relation("TableOrdersHistory") // History of all orders for this table
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  DIRTY
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  iconName  String?
  menuItems MenuItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model MenuItem {
  id             String    @id @default(cuid())
  name           String
  description    String?
  price          Float
  imageUrl       String?
  dataAiHint     String?   // For placeholder images
  categoryId     String
  category       Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems     OrderItem[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  availableModifiers MenuItemAvailableModifier[] // Link table for many-to-many with Modifier
}

model Modifier {
  id          String   @id @default(cuid())
  name        String   @unique
  priceChange Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  menuItems  MenuItemAvailableModifier[] // Link table for many-to-many with MenuItem
  orderItems OrderItemModifier[]         // Link table for many-to-many with OrderItem
}

model Order {
  id           String      @id @default(cuid())
  tableId      String
  table        Table       @relation("TableOrdersHistory", fields: [tableId], references: [id], onDelete: Restrict) // Prevent deleting table if it has orders
  tableNumber  Int
  status       OrderStatus @default(OPEN)
  subtotal     Float
  taxRate      Float
  taxAmount    Float
  totalAmount  Float
  userId       String?     // Optional: if you link orders to users
  user         User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  orderItems   OrderItem[]

  // Relation for current order on a table (if table.currentOrderId points here)
  currentTable Table?      @relation("CurrentTableOrder")
}

enum OrderStatus {
  OPEN
  IN_PROGRESS
  DONE
  PAID
  CANCELLED
}

model OrderItem {
  id              String    @id @default(cuid())
  orderId         String
  order           Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId      String
  menuItem        MenuItem  @relation(fields: [menuItemId], references: [id], onDelete: Restrict) // Prevent deleting menu item if in an order
  menuItemName    String    // Denormalized for easy display
  quantity        Int
  unitPrice       Float     // Price of the menu item at the time of order
  specialRequests String?
  totalPrice      Float     // (quantity * unitPrice) + sum_of_modifier_price_changes
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  selectedModifiers OrderItemModifier[] // Link table for many-to-many with Modifier
}

// Junction table for OrderItem and Modifier (Many-to-Many)
model OrderItemModifier {
  id          String   @id @default(cuid())
  orderItemId String
  modifierId  String
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  modifier    Modifier @relation(fields: [modifierId], references: [id], onDelete: Cascade) // If modifier is deleted, this link is removed.
  // You might want to store modifier name and priceChange here too if they can change over time and you need historical accuracy
  // For simplicity, we're just linking.
  createdAt   DateTime @default(now())

  @@unique([orderItemId, modifierId])
}

// Junction table for MenuItem and Modifier (Many-to-Many for available modifiers)
model MenuItemAvailableModifier {
  id         String   @id @default(cuid())
  menuItemId String
  modifierId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  modifier   Modifier @relation(fields: [modifierId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([menuItemId, modifierId])
}

// For Order Tracking System
model ExternalOrder {
  id                      String                @id @default(cuid())
  platform                String
  platformOrderId         String
  customerName            String
  customerAddress         String
  customerPhoneNumber     String?
  items                   Json // Assuming ExternalOrderItem[] will be stored as JSON for simplicity
  subtotal                Float
  deliveryFee             Float
  platformFee             Float?
  totalAmount             Float
  restaurantPayout        Float?
  status                  ExternalOrderStatus
  placedAt                DateTime
  estimatedDeliveryTime   DateTime?
  notes                   String?
  paymentServiceType      String?
  shortCode               String?
  // platformIcon is a React component, not stored in DB

  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  @@unique([platform, platformOrderId]) // Ensure platform order IDs are unique per platform
}

enum ExternalOrderStatus {
  PENDING_CONFIRMATION
  PREPARING
  READY_FOR_PICKUP
  ON_THE_WAY
  DELIVERED
  CANCELLED_BY_RESTAURANT
  CANCELLED_BY_USER
}

// For Restaurant/Platform Settings
model DeliveryPlatform {
  id        String   @id @default(cuid())
  name      String   @unique
  apiKey    String
  apiSecret String
  isEnabled Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// General App Settings (example, can be expanded)
model AppSetting {
  id        String @id @default(cuid())
  key       String @unique // e.g., "restaurantName", "logoUrl", "theme", "language"
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
